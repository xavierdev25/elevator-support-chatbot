#!/usr/bin/env python3
"""
DemostraciÃ³n del manejo de contexto y dualidad del usuario
"""

from chatbot import ElevatorChatbot

def demo_contexto():
    """Demuestra cÃ³mo el chatbot maneja el contexto y la dualidad"""
    
    print("ðŸ§  DEMOSTRACIÃ“N DE CONTEXTO Y DUALIDAD")
    print("=" * 60)
    
    # DemostraciÃ³n 1: Cambio de opiniÃ³n sobre el tipo de equipo
    print("\nðŸ“‹ DEMOSTRACIÃ“N 1: Cambio de Tipo de Equipo")
    print("-" * 50)
    chatbot1 = ElevatorChatbot()
    
    conversation1 = [
        "Hola",
        "Necesito mantenimiento",
        "asensor",
        "no",  # Cambia de opiniÃ³n
        "escalera",
        "todo",
        "Otis",
        "12"
    ]
    
    for user_input in conversation1:
        print(f"Usuario: {user_input}")
        response = chatbot1.get_response(user_input)
        print(f"Bot: {response}")
        print("-" * 30)
    
    # DemostraciÃ³n 2: Cambio de marca despuÃ©s de consultar
    print("\nðŸ“‹ DEMOSTRACIÃ“N 2: Cambio de Marca")
    print("-" * 50)
    chatbot2 = ElevatorChatbot()
    
    conversation2 = [
        "Hola",
        "mantenimiento",
        "ascensor",
        "parte mecanica",
        "Â¿quÃ© marcas tienen?",
        "Yaskawa",
        "no",  # Cambia de opiniÃ³n
        "Schindler",
        "8"
    ]
    
    for user_input in conversation2:
        print(f"Usuario: {user_input}")
        response = chatbot2.get_response(user_input)
        print(f"Bot: {response}")
        print("-" * 30)
    
    # DemostraciÃ³n 3: CorrecciÃ³n de edad
    print("\nðŸ“‹ DEMOSTRACIÃ“N 3: CorrecciÃ³n de Edad")
    print("-" * 50)
    chatbot3 = ElevatorChatbot()
    
    conversation3 = [
        "Hola",
        "mantenimiento",
        "ascensor",
        "cabina",
        "Otis",
        "60",  # Edad invÃ¡lida
        "15",  # Edad corregida
    ]
    
    for user_input in conversation3:
        print(f"Usuario: {user_input}")
        response = chatbot3.get_response(user_input)
        print(f"Bot: {response}")
        print("-" * 30)
    
    # DemostraciÃ³n 4: MÃºltiples consultas en una conversaciÃ³n
    print("\nðŸ“‹ DEMOSTRACIÃ“N 4: MÃºltiples Consultas")
    print("-" * 50)
    chatbot4 = ElevatorChatbot()
    
    conversation4 = [
        "Hola",
        "mantenimiento",
        "ascensor",
        "todo",
        "Mitsubishi",
        "10",
        # DespuÃ©s de la cotizaciÃ³n, el bot reinicia automÃ¡ticamente
        "mantenimiento",
        "escalera",
        "parte mecanica",
        "Kone",
        "5"
    ]
    
    for user_input in conversation4:
        print(f"Usuario: {user_input}")
        response = chatbot4.get_response(user_input)
        print(f"Bot: {response}")
        print("-" * 30)
    
    # DemostraciÃ³n 5: Contexto mantenido durante confirmaciones
    print("\nðŸ“‹ DEMOSTRACIÃ“N 5: Contexto en Confirmaciones")
    print("-" * 50)
    chatbot5 = ElevatorChatbot()
    
    conversation5 = [
        "Hola",
        "mantenimiento",
        "ascensor",
        "sistema electronico",
        "poseo un yaskawa",
        "sÃ­",  # Confirma la marca
        "25"   # ContinÃºa con la edad
    ]
    
    for user_input in conversation5:
        print(f"Usuario: {user_input}")
        response = chatbot5.get_response(user_input)
        print(f"Bot: {response}")
        print("-" * 30)
    
    print("\nâœ… Â¡El chatbot maneja perfectamente el contexto y la dualidad!")
    print("CaracterÃ­sticas del contexto:")
    print("â€¢ Mantiene el estado de la conversaciÃ³n")
    print("â€¢ Permite cambios de opiniÃ³n")
    print("â€¢ Valida y corrige errores")
    print("â€¢ Reinicia automÃ¡ticamente despuÃ©s de cada cotizaciÃ³n")
    print("â€¢ Maneja confirmaciones inteligentemente")

if __name__ == "__main__":
    demo_contexto() 